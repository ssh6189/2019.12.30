############################최소제곱근오차##########################
import numpy as np

# x 값과 y 값
x=[2, 4, 6, 8]
y=[81, 93, 91, 97]

# x와 y의 평균값
mx = np.mean(x)
my = np.mean(y)
print("x의 평균값:", mx)
print("y의 평균값:", my)

# 기울기 공식의 분모
divisor = sum([(mx - i)**2 for i in x])


# 기울기 공식의 분자
def top(x, mx, y, my):
    d = 0
    for i in range(len(x)):
        d += (x[i] - mx) * (y[i] - my)
    return d

#기울기와 y절편 구하기

s = top(x, mx, y, my)

a = s/divisor

print("기울기 : ", a)

b = my - (mx * a)

print("y절편 : ", b)
 ######################오차 계산 : 평균 제곱근 오차 #################################
import numpy as np

#  임의의 기울기와 절편
ab = [3, 76]

data = [[2,81],[4,93],[6,91],[8,97]]

# x 값과 y 값
x= [ i[0] for i in data]
y= [ i[1] for i in data]


#  임의의 기울기와 절편의 모델로부터 예측값 반환 함수
def predict(x):
    return ab[0]*x+ab[1]

# 평균 제곱근 오차 반환 함수
def rmse(p, a):
    return    np.sqrt(((p-a)**2).mean())

predict_result = []

for i in range(len(x)):
    predict_result.append(predict(x[i]))
    print("공부한 시간 =%.f, 실제 점수 =%.f,  예측점수=%.f" % (x[i], y[i], predict_result[i]))

# 평균 제곱근 오차 반환 함수를 이용해서 최종값 구하기
def  rmse_val(predict_result, y) :
    return rmse(np.array(predict_result), np.array(y))

print("rmse  최종값 :"+ str(rmse_val(predict_result, y)))
